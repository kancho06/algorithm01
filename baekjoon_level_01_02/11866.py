# 문제
# 요세푸스 문제는 다음과 같다.
# 1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(<=N)가 주어진다.
# 이제 순서대로 K번째 사람을 제거한다. 한사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다.
# 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다.
# 예를들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.
# N과 K가 주어지면 (N, K)- 요세푸스 순열을 구하는 프로그램을 작성하시오.

# 입력
# 천째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다 (1 <= K <= N <= 1,000)

# 출력
#  요세푸스 순열을 출력한다.  <3, 6, 2, 7, 5, 1, 4>


# 풀이 첫번째
n, k = map(int, input().split())
# n = 100
# k = 3
circle = [i for i in range(1, n + 1)]  # 맨 처음에 원에 앉아있는 사람들 (리스트 내포)
josephus_problem = []  # 제거된 사람들을 넣을 배열
num = 0  # 제거될 사람의 인덱스 번호

for t in range(n):
    num += k - 1  # 컴퓨터는 0 -> 1 로 갈때 한번이고 오세푸스는 인덱스 본인부터 한번으로 치기 때문에 -1 시켜준다
    if num >= len(circle):  # 한바퀴를 돌고 그다음으로 돌아올때를 대비해 값을 나머지로 바꿈
        num = num % len(circle)

    josephus_problem.append(str(circle.pop(num)))  # .pop 는 del 과 다르게 지우고 숫자를 리턴함

print("<", ", ".join(josephus_problem)[:], ">", sep='')  # 구분자.join 을 이용하여 [:] 모든 아이템 출력

